<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[去大城市看看：多伦多与芝加哥]]></title>
    <url>%2F2019%2F06%2F10%2Ftoronto_chicago%2F</url>
    <content type="text"><![CDATA[写在前面对加拿大的最初印象来自于小学一二年级看过的一部电视剧：《小留学生》。剧中的留学生们总是穿着厚厚的毛衣、带着毛线帽，在终日白雪茫茫的渥太华求学。四月底，我终于有机会亲眼看看加拿大了。 从多伦多回来，和+聊起: “你说世界上的大城市是不是都像上海，纽约，多伦多这样，高楼大厦林立、千篇一律呢？” “我觉得芝加哥和其他城市很不一样。” “真的吗？我不信！” 于是五月初，又愉快的开启了芝加哥之行~ 这两段独立的旅行采用了截然不同的出行方式：一段是自驾🚗，一段是火车🚆与脚🦶。把他们写在一篇是因为两者有很多值得对比的地方，城市的异同、出行方式的优劣等。 行程Day 1: 安大略艺术博物馆天还没亮，我们乘xd的车从安娜堡出发。经历长长的排队（难道那些人住在底特律，工作在加拿大？），终于通过边检，从底特律入境加拿大。告别了讨厌的英制单位，导航开始播报“距离多伦多还有XX公里”；因为加元和美元0.8：1的汇率，一切的商品开始打八折~ 我们的第一站是安大略艺术博物馆(The AGO)。 这座博物馆紧邻市中心的中国城，据说是北美第八大艺术博物馆。他的旁边还有一个艺术学院，整个街区的建筑都造的很有设计感。因此我对多伦多的第一印象是：充满情调的城市~ 博物馆里面既有加拿大本土艺术，也有欧洲艺术；有讲述工业革命的画作，也有抽象的现代雕塑。下面是一些我很喜欢的、和工业革命有关的画作。虽然对艺术没什么造诣，但在看画的时候喜欢思考色彩的搭配、构图，怎么才能画出这样的图，所以沉迷其中，觉得津津有味。 博物馆窗外的景色不输内部的展览：高耸的CN Tower，以及灰蒙蒙的天气所掩盖不住的彩色建筑。 Day 2: CN Tower与多伦多大学睡到自然醒后，我们打卡了地标性建筑：CN Tower–像上海的东方明珠、纽约的帝国大厦、西雅图的Space Needle一样，可以看到城市的天际线。 CN Tower还紧靠五大湖中的安大略湖，湖边的大楼很默契的使用与湖水相近的色调，同时蓝绿色的湖水又给大楼的玻璃染上了相同的颜色，蓝绿色的多伦多看起来非常和谐。 从背向湖的一面可以一览整个多伦多市中心的景色。市中心黑色与褐色的大厦给人一种肃穆的、冷冰冰的钢铁森林的感觉。与我所见过的所有北美城市一样，市中心与非市中心清晰的分界可以一眼分辨出来：CBD的高楼与生活区矮小的房屋之间形成一种突兀的过渡。 下午我们去参观了在各种全球大学排行榜上名列前茅的多伦多大学，此行坚定了我不报加拿大graduate school的决心🤭 尽管已经到了四月底，加拿大桃花还未始盛开；再加上考试周刚刚结束，街上没什么学生，整个校园看上去有些萧索。校园里不乏漂亮的建筑，教堂式的图书馆，哥特式的办公楼，墙壁上布满了藤蔓的老房子。但可能因为在umich生活了一年，对这些建筑已经见怪不怪😬 我们找到了属于engineering学院的大楼。与umich不同，这里楼内的设施与楼外一样看上去十分老旧，走在里面让人觉得有些压抑；机房与umich的caen lab比起来似乎差很多（可能是我们没有去到最酷炫的地方吧）。翻翻手机相册，我对于这座大学留下的影像只有黑板上中国人的调侃： 走出多伦多大学，我们乘着xd的车去觅食，发现了多伦多的一大特色：红白相间的有轨电车。作为多伦多公共交通的支柱，他给这座城市添加了复古的气息。车开在电车的轨道上面，咯噔咯噔的很好玩，俨然成为了“有轨汽车”。 Day 3: 尼亚加拉大瀑布世界三大瀑布之一的尼亚加拉大瀑布在美国与加拿大边界，距离多伦多仅两小时车程。 前一天晚上，我们入住了qss预订的高贵的fall view酒店 (Hilton)，见识了夜色中的大瀑布。蓝色的马蹄状瀑布，看起来很酷的样子。 这高贵酒店的吃饭楼层有全景玻璃可以俯瞰大瀑布，瀑布溅起的水花有几十米高，形成一片雾气，将一半的瀑布隐藏在后面。 开车来到瀑布旁边，“雷神之水”果然名不虚传：瀑布的轰鸣声好像连续不断的雷声，要大声的说话身旁的人才能听得到。站在瀑布边上，让人不得不感叹自然的力量，壮丽山河大概就是在说这样的景象吧。 这座瀑布还是海鸥的家，成百上千的黄嘴海鸥在瀑布前盘旋，甚至让人有些难以分辨看到的是水花还是海鸥。下图中的白点全都是海鸥！ 海鸥证件照与我觉得超可爱的加拿大鹅~ 因为四月的瀑布里还有很多冰碴，游船没有开放，没能更近距离的感受瀑布的水花（我猜这个瀑布打在身上应该会超级疼）留下了一点小遗憾。]]></content>
      <categories>
        <category>Travel Notes</category>
      </categories>
      <tags>
        <tag>Chinese</tag>
        <tag>Travel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Build 3-D version "Do Step on White Tiles" with a SmartFusion Board]]></title>
    <url>%2F2019%2F05%2F03%2F373Proj%2F</url>
    <content type="text"><![CDATA[Background Probably one of the best interactive game projects I have seen in the class. — Prof. Alanson Sample and Prof. Matt Smith, the University of Michigan In the passing winter semester, I took an interesting course: Introduction to Embedded System Design (EECS 373)🤩. I’ve learnt memory-mapped I/O, interrupt, timer and many other important concepts in embedded system. The target of this course is to build an embedded system by using a specific kind of development board – Actel SmartFusion&reg; SoC FPGA. Our (Zhihao Ruan, Shiyu Liu, Kun Huang and me) final project is “Do Step on White Tiles”, which is inspired by a popular mobile game “Don’t Tap the White Tile”. I am responsible for VGA part. This is one of my proudest projects, so I’d like to write a blog to record this project experience and share these fun technical details with more people! This post is written in shared effort with Ryan! Game RuleThere are 3 modes for our game: slow, medium and fast. Different modes have different numbers and speeds of tiles. At the beginning of the game, player will have 5 lives. 🍭When left foot steps on a white tile, white tile becomes green and score++ 🍭When left foot steps on a white tile, white tile becomes red and score++ 🌶When miss a white tile, player will lose one life ☠️When all lives go, game over DemoHere is a video captured during EECS373 Project Expo🥳! ComponentAs indicated in the graph, we use one SmartFusion&reg; board to control 5 main peripherals: Projector controlled by VGA signal for projecting moving tiles, score, left health point PIXY camera for detecting if player’s feet are on white tiles Nintendo controller and LCD display for calibration camera, setting game mode, controlling start and pause Sound board for playing background music and sound effect Technical DetailsCode EnvironmentsAs for the project developing environment, we’re using Libero SoC Design Software as well as Microsemi SoftConsole. The specific versions are: Libero SoC v11.9 SP3 Microsemi SoftConsole v3.4 Windows 10 Pro 1809 (operating system) Note that Libero SoC is neither forward nor backward compatible. A Libero SoC v11.9 project is not compatible with a Libero SoC v11.9 SP3 project. Memory-mapped I/O &amp; Advanced Peripheral BusIn common sense, every memory address in a CPU corresponds to some place which can store data (aka “real memory”). However, in embedded systems, each input/output (I/O) device also corresponds to a specific memory address in the core. For these addresses, each of them has been mapped to an I/O device instead of “real memory”, such as Analog-to-Digital Converter (ADC), Digital-to-Analog Converter (DAC), General-Purpose I/O (GPIO) pins, etc. Accessing these addresses through CPU is actually accessing their corresponding I/O devices. APB (Advanced Peripheral Bus) is used as an interface to access these peripherals. A typical APB consists of the following signal (by naming convention): Signal Name Meaning PRDATA Data line where CPU reads from the peripheral. PWDATA Data line where CPU writes to the peripheral. PWRITE Indicates whether it is a read or a write transaction. PENABLE Indicates whether CPU has started the transaction. PSEL Indicates whether CPU has selected this peripheral. PADDR Indicates what address CPU has chosen to interact with. PCLK Clock signal from CPU. PREADY Controlled by peripheral; indicates whether peripheral has been prepared for the transaction. By convention, in terms of APB, the CPU is called “master” while the peripherals are called “slaves”. While signals are generally high/low voltages which is in essence a hardware issue, APB makes generating these signals with C code possible. Implementation in VerilogWhile in most microcontrollers APB is not able to be modified because it is a very complicated circuit network soldered onto the PCB, with an FPGA we can take full advantage of that and customize our own APB. In Verilog, we can simply make use of an unused memory address and create the following module (APB interface): 12345678910111213141516171819202122module apb_interface( input PCLK, // clock input PRESERN, // system reset// APB3 BUS INTERFACE input PSEL, // peripheral select input PENABLE, // distinguishes access phase output wire PREADY, // peripheral ready signal output wire PSLVERR, // error signal input PWRITE, // read/write control bit input [31:0] PADDR, // IO address input wire [31:0] PWDATA, // (processor) bus is writing data to // this device 32 bits output reg [31:0] PRDATA, // (processor) bus is reading data from this device /*** Your Code (inputs &amp; outputs) ***/);assign PSLVERR = 0; // assumes no error generationassign PREADY = 1; // assumes zero waitwire write_enable = (PENABLE &amp;&amp; PWRITE &amp;&amp; PSEL); //decodes APB3 write cyclewire read_enable = (!PWRITE &amp;&amp; PSEL); //decode APB3 read cycle// ****** Your code ******endmodule We can see that all the I/O ports in the Verilog module has to strictly follow the APB convention mentioned above. VGAVGA is short for Video Graphics Array. Although it is a relatively aged display method (introduced by IBM in 1987), its frequency (60Hz per frame) is good enough for our display purpose. BasicsA VGA cable has 15 pins, 6 of them are used in the project: Blue, Red, Green represent color for one pixel Horizontal sync and vertical sync are used to define the ends of each line and the whole frame GND for ground A VGA video is a stream of frames. Each frame is made up of a series of horizontal lines, and each line is made up of a series of pixels. At the beginning, there will be a scan point on top left corner of the frame. In each clock period, we should output correct RGB value for current pixel. And the scan point will go to the next pixel. When it comes to the end of a line, the Horizontal-Sync signal will go low. Then the scan point goes line by line. When it comes to the end of the frame, the Vertical-Sync will go low. Till now, we refresh the whole frame for one time. In a word, to project a desired video, we just need to output correct RGB signal for each pixel in sequence. ImplementationThe main logic for VGA display is implenmented in C code: it determines the positions of tiles, scores and health point; then writes these information in specific APB addresses. Verilog code is only for analyzing information from these APB addresses and generating corresponding signals. A 60-Hz interrupt will be generated periodically in fabric. In main.c, 1__attribute__((interrupt)) void Fabric_IRQHandler(void)&#123;&#125; is interrupt handler, which is responsible for refresh of the whole frame. Moving TilesThere are 8 tiles in maximum in one frame. To make them look as random as possible, I randomly generate 3 attributes for each tile: length the column inside which it will move delay for interval between the time when a tile goes out of the frame and when it reappears at the top of the frame. In vga.c, 1void random_mode(int k) &#123;&#125; controls the new position of kth tile based on its old position. Besides, the attribute, left_on, right_on, will control color of the tile. When it is set to true inside pixy.c, the color will turn green or red. Score &amp; Health PointOnce left_on or right_on is set to true inside pixy.c, the variable, score, will add one. If left_on and right_on are false until the tile goes out of the frame, one life will lose. The display of score🔢 and heart❤️ are hard-coded in verilog. Another way to show them is using Sprites + SRAM (see below). Show More Complicated GraphAlthough the display for this game is fairly simple, I tried using Spritesand SRAM, which is used for complicated graphics (but didn’t use it in final version of project). The idea behind Sprites is that generate RGB values for each pixel in a picture; and then store them in SRAM of microcontroller; read RGB value for corresponding pixel from SRAM when scan point comes to the pixel. The SRAM module inside SmartFusion is shown above. Pull up r_en when you are reading, pull up w_en when you are writing. However, there are two annoying issues when I implenmented it: Timing. When use APB and SRAM, timing of these two things need to be considered carefully. The PREADY cannot be set to high all the time since SRAM need one clock period to finish reading/writing. So PREADY should be delayed for one clock period. Memory limitation. The SRAM inside SmartFusion is only 64kB. Nintendo ControllerFor the controller for the user menu selection, we’re using a classic Nintendo&reg; NES controller. This is a relatively aged controller, but its signal is easy to decode and it’s sufficient for our design. We can see that it consists of 8 buttons: Up, Down, Left, Right, Select, Start, A and B. For more details, a datasheet that I have referred to when programming the NES controller says that: The Nintendo Entertainment System or NES, also known as the Nintendo Family Computer (Famicom) was released in Japan in 1983 and shortly after in the USA in 1985. The system was even more successful than the Atari 2600 and more or less put the last stake in the heart of Atari home consoles forever. The NES sold more than 60,000,000 units worldwide in its heyday and still sells to this day (I just bought 4 of them from eStarland.com)! There are over 200 clones of the system in circulation and the word “Nintendo” is used in many cultures as a youth slang term with many “varied” meanings. The system itself was nothing compared to the Propeller chip’s computing power, the NES was powered by the 8-bit 6502 running at 1.79 MHz, but the NES did have quite a bit of dedicated graphics hardware making it quite a contender in the 8-bit era, it sported multiple tile maps, graphics planes, sprites, sound, and a lot more. — “Game Programming for the Propeller Powered HYDRA”, pp. 95 Interfacing the Nintendo NES controllerOn the back of the NES controller, it is actually organized as the following figure. We can see that there’re five wires: brown, red, orange, yellow, white. The functions of these wires are summarized below. Signal Name Meaning GND Brown clock Red latch Orange data_out Yellow 5V White The states of the 8 buttons (pressed/not pressed) will be provided at the data_out line, bit by bit. The latch and the clock line are used to control the clocking of the data_out data line. In order to get the button states from the NES controller, we need to perform the following steps. Set the clock of the MCU to be greater than or equal to $12\mu\rm{s}$. Set latch line to LOW. Set clock line to LOW. Now, we’re in a known state. Pulse latch line HIGH for at least 2 cycles. This will latch the data into the shift register. Read the bits in from data_out line. The first bit will be available after the latching process. Pulse clock line 7 times to read the remaining bits. Note. The bits are inverted from the data line (LOW for pressed, HIGH for not pressed). Based on the above rules, we can create a logic in Verilog that keeps reading the button states of the NES controller in the background. To keep things simple, we use APB interface to interact with the C coding parts, and we organize the 8 button states to be in the form of an 8-bit integer in a specific APB address that can be accessed with C code. As we’re using 25MHz clock on our SmartFusion&reg; board, we need to extend our clock signal to $12\mu\rm{s}$. Thus, we need a clock divider. 1234567891011121314reg [9:0] clock_divider;assign clock_divider_max = (clock_divider == 10'd150);always @(posedge PCLK) begin if (~PRESERN) begin clock_divider &lt;= 10'd0; end else if (clock_divider_max) begin clock_divider &lt;= 0; end else begin clock_divider &lt;= clock_divider + 1; endend Then, we need to create our logic to pulse the latch and clock signal, and get the bits from data_out. Whenever we read a new bit in, we need to shift all the old bits left by 1. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556reg [7:0] data_in, data_complete;reg [2:0] read_count;reg start, finish;always @(posedge PCLK) begin if (~PRESERN) begin latch &lt;= 0; clock &lt;= 0; start &lt;= 1; finish &lt;= 0; count &lt;= 5'd0; data_in &lt;= 8'd0; data_complete &lt;= 8'd0; read_count &lt;= 3'd0; end if (finish == 1) begin data_complete &lt;= data_in; finish &lt;= 0; start &lt;= 1; clock &lt;= 0; data_in &lt;= 8'd0; end if (clock_divider_max) begin if (start == 1) begin // latch the first data latch &lt;= 1; start &lt;= 0; end if (latch == 1) begin latch &lt;= 0; end if (clock == 1) begin clock &lt;= 0; end if (data_en) begin // latch data // data are inverted bits clock &lt;= 1; data_in[7] &lt;= data_in[6]; data_in[6] &lt;= data_in[5]; data_in[5] &lt;= data_in[4]; data_in[4] &lt;= data_in[3]; data_in[3] &lt;= data_in[2]; data_in[2] &lt;= data_in[1]; data_in[1] &lt;= data_in[0]; data_in[0] &lt;= ~data; read_count &lt;= read_count + 1; if (read_count == 3'd7) begin // latch the last data finish &lt;= 1; read_count &lt;= 3'd0; end end endend LCD DisplayWe use Sparkfun’s $20\times4$ serial enabled LCD display in our project. The interface of this LCD is actually really simple &mdash; just UART. If you send a character a to it through UART, it will display an “a” on the screen; if you send a string Hello World to it, it will display “Hello World”. It is worth noticing that this LCD module displays characters based on the position of a cursor. This is very similar to writing on a text file. The character sent to the module will always be written at the position of the cursor. For instance, if the current cursor position is at the first position of the first line, the incoming character a will then be displayed at the first position in the first line. What is worth mentioning is that there are some special ASCII character pairs that have special meanings and have been hard-coded into the LCD module. For example, some of these special characters are: table th:first-of-type { width: 120px; } Character Value Meaning 0xFE, 0x01 Clear the entire display. 0xFE, 0x80 Set cursor position to be the first position in the 1st line. The 20 values starting from 0x80 correspond to the cursor positions from the beginning of the 1st line to the end of the first line. For the first position in the 2nd line, add 64 to 0x80; for the first position of the 3rd line, add 20 to 0x80; for the first position of the 4th line, add 84 to 0x80. 0x12 Reset the whole module. Note. Two bytes separated by a comma means a consecutive ASCII character pair. For instance, 0xFE, 0x80 means 0xFE should be first sent to the LCD module, followed by a 0x80. Constructing the User MenuIn terms of constructing a complete user menu, we use &gt; as the prompt character for the selected option. We develop a data structure called LCD_Display to store the current contents of the 4 lines as well as the line index of the prompt character, and another Menu for multiple layers of the menu. For simplicity, we set each layer of the menu has a maximum size of 6. For more detailed information, please visit our GitHub repo and take a look at the menu.[ch]. Pixy CameraPixy camera is a small and responsive open-source camera developed by CREATE Lab, a part of the Robotics Institute at Carnegie Mellon University. It is equipped with color recognition and it can tell the location of the object in real time within its field of view. It has a very nice interface for MCU, which we can integrate into our SmartFusion&reg; board. Particularly, it is able to transmit its color recognition results to MCU via three interfaces: I2C, SPI, and UART. It is known that SPI has the highest data transmission rate among the three popular protocols, so we decide to utilize its SPI interface. Porting GuidelinesAccording to the official documentation, Pixy camera has the following available ports: with the numbering convention (looking at the back of Pixy): 123451 23 45 67 89 10 The Serial ProtocolSignature is an important feature of Pixy. A signature represents a particular color: say you may want to set a signature for color red, another signature for color blue, and another signature for color yellow, etc. An object is the biggest object with a corresponding signature appearing in Pixy’s field of view. That is, Pixy can hold as many objects as the signatures. The whole information containing in one single image is called a frame. A data frame can have several objects corresponding to several signatures. Pixy’s protocol enables itself to convey information for multiple objects of different colors at a time. More specifically, its serial protocol goes as follows: The information for each object is 14 bytes in little endian, with the first 2 bytes starting with 0xaa55. Two consecutive 0xaa55 starts a new frame, with the second 0xaa55 starts the new object. 123456789Bytes 16-bit word Description----------------------------------------------------------------0, 1 y sync: 0xaa55=normal object, 0xaa56=color code object2, 3 y checksum (sum of all 16-bit words 2-6, that is, bytes 4-13)4, 5 y signature number6, 7 y x center of object8, 9 y y center of object10, 11 y width of object12, 13 y height of object Above are the information needed for us to parse Pixy’s data. But how can we transmit data to Pixy to set the signatures? Fortunately, Pixy’s group have developed a very nice software called PixyMon for us to accomplish this goal. This software sets up a UART communication between PC and Pixy camera, and it can transmit data to it as soon as we click the corresponding button in the software. By the means mentioned above, we’re able to get the center of the objects with specific color within Pixy’s field of view, which is a very nice method to locate the player’s feet in our project. Meanwhile, there are also other advanced features of Pixy that we haven’t explored. For details, please visit their official website. Sound BoardWe use Adafruit Audio FX Mini Sound Board for playing background music. By plugging in the sound board into computer using USB cable, it will show up as a new USB key. Just copy music into it, music will be written properly in its disk. To trigger audio, pull down one of trigger pins - named #0 thru #10 to; to stop audio, pull down Rst. The control of this board also uses APB. CodeAll code are available in my github (direcoty structure is shown below). The whole project is available in Ryan’s github. AcknowledgementSpecial thanks for Prof. Sample and Prof. Smith’s support throughout the semester ☕️🥃 my teammates: Shiyu, Ryan and Kun’s efforts on this project 🍦🍻 my own passion 🍗🍺]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>English</tag>
        <tag>Embedded System</tag>
        <tag>Course Project</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[四个人，十四天，四座城市：坎昆，哈瓦那，特立尼达，墨西哥城自由行]]></title>
    <url>%2F2019%2F01%2F13%2Fmexico_cuba%2F</url>
    <content type="text"><![CDATA[写在前面第一次自由行，第一次说走就走（计划）的旅行，第一次写游记。 因为某个喝奶茶而振奋的夜晚，在知乎上看到一篇古巴游记，我决定一定要去古巴这个这个国家走一走，去看老爷车，去看这个 timeworn but magnificent, dilapidated but dignified, fun yet maddeningly frustrating Lonely Planet 的城市。查了机票和各种开支，发现和在中国旅游差不多（到了才知道我被骗了，古巴吃饭和美帝不相上下😕），就立刻和另外三个同学（wxy, wy, dzy）一起，订行程订机票订airbnb。 2018年12月24日中午12点，旅行开始了！ 断断续续写下这篇游记（前三天的行程是一个月后写的），记录一路上的所见所闻和杂七杂八的所想。 全文配图无滤镜且照片压缩过，大家凑合看😬。感谢同行小伙伴提供图片！ 行程Day 1: 在中国四线小城闲逛【底特律✈️坎昆】圣诞节假期来坎昆度假的人超级多，一个多小时才通过到处都是华为广告的海关。到达Airbnb，已经是晚饭时间。 坎昆市中心的街道有些破旧，路面随处可见的垃圾，被人乱涂乱画的植发广告牌（XD），这里给我留下了很糟的第一印象。尽管路边的椰子树提醒我现在在一个著名的海滨城市，我依然感觉自己游走在中国的四线小城里。今天是平安夜，路上几乎没有行人，能见到的几乎都是穿着白色制服的工人们：他们下班回家，嬉嬉笑笑的涌上像是快要报废的公交车里。 第一顿墨西哥式晚饭，每道菜都有奶酪，但味道一般。 Day 2: 分层的加勒比海【奇琴伊察 + 坎昆🏖】来之前在Viator上报了一个叫”Early Access to Chichen Itza“的一日游，早晨五点在酒店集合🤭可以避开游客高峰期和中午的炎热。 不过，举行圣诞party的邻居凌晨两点钟就把小伙伴们吵醒了，他们整个晚上在一街之隔的院子里跟着豪放的墨西哥音乐喝酒跳舞。。。 三个半小时的车程，我们终于来到了世界七大奇迹之一：奇琴伊察。 奇琴伊察的中心是El Castillo，玛雅金字塔。导游说墨西哥的金字塔不同于埃及金字塔作为墓穴，这里是玛雅居民举办大型集会的地方。并解释说站在金字塔中轴线附近的贵族们因为回声可以听清首领的讲话，而两侧的平民们什么都听不到；在春分和秋分的时候，这座建筑会在阶梯上投下羽蛇状的阴影（他们崇拜羽蛇神），并随着太阳的移动在北面滑行下降。千年前玛雅人精妙的设计令我们赞叹不已。金字塔顶部有几只鹰在盘旋，显神圣。一张游客照~在金字塔的西北处，是古代中美洲最大的球场。玛雅人举办球赛可不是为了娱乐，这是他们的一项重要宗教仪式。球赛的规则是，两队人用上臂、大腿和臀部让球在对立的两个墙面回弹，不许落到地上；游戏结束后，胜利那一队的队长会被杀掉用来献祭，他的头骨将作为新球的核心🤭。在我们看来胜利的一方反而受到惩罚，但是当时的玛雅人认为可以被当作祭品是无上的荣耀，所以两队都会拼尽全力取得胜利。这个球场有着与金字塔同样精妙的回声效果，比如对球场的墙壁喊话，会听到恰好七次回声；中轴线处的人可以在几百米外听清首领的讲话。图源Lonely Planet。除了金字塔和球场，这里还有许多祭坛、天文台以及后人无法理解的各种建筑。 因为early access，我们三点钟便回到了坎昆。有句话叫：坎昆归来不看海。所以我们决定去高贵的hotel zone（坎昆酒店区）看看加勒比海~ Hotel zone是坎昆西面成”7“字型的一片狭窄的区域，这里遍布奢侈的全包式酒店，是北美人民冬天最爱前往的度假圣地之一。打车来到一个名叫”Chac-mool”的沙滩，后来参观人类学博物馆的时候知道，Chacmool是玛雅人心中帮助人与神沟通的使者。 这里果然名不虚传。白色的沙滩，从近到远分层的“加勒比蓝”海水，泛着些许紫色的天空，这些我最喜欢的颜色自然的组合，让人挪不开眼睛。四个人很开心的拍了合影~ 在Hotel Zone吃过晚饭，我们打算体验一下墨西哥的公交车。司机是一个年轻的小伙子，起初，像正常的公交司机一样，他稳稳的在酒店区的车流中穿梭。突然，车内响起了震耳欲聋的墨西哥音乐，车速瞬间飙升。发生了什么？小伙伴指着窗外的另一辆公交车说：他们在飙车。果然，随着音乐边扭动，边开车的司机得意的向另一个同样年轻的司机笑了笑，就把他甩在了后面。这可是公交车啊！墨西哥人的不羁可见一斑。 Day 3: 世界上最好吃的taco【图卢姆 + 天然井游泳】同样报了一日游的一天，原本定了早晨六点半在酒店集合，可是四个人睁开眼睛已是七点半。于是我们赶紧和旅行社联系，旅行社帮助我们与完全不懂英文的出租车司机沟通，带我们到达了图卢姆（大约70刀😢）。 与大部队会和之后，一位玛雅人向导带领我们参观图卢姆遗址。我听不懂她说的英文，大概知道这里是玛雅人的重要城邦之一。坐落在美丽的加勒比海岸，这里是玛雅人的贸易场所。与奇琴伊察相似的石头建筑，只剩下了断壁残垣。遗迹与海水，给我一种来到巴厘岛海神庙的感觉。忘拍景色，只有合影😬 因石灰岩坍塌而形成的天然井(Cenote)是墨西哥尤卡坦半岛的特色之一，在古代被玛雅人用来宗教活动，现在则因其干净清爽的井水以及遍布洞穴的钟乳石成为洞潜的圣地。洞内的钟乳石。穿好救生衣，导游带我们跳进了冰冷的井水中。洞内除了导游的手电筒外几乎没有别的光源，几只蝙蝠在头顶盘旋，我有点害怕。导游说今天要带我们游一个小众的路线。 游进一个一人宽的小口，我们来到了洞穴内部。顺着导游手电筒的光，可以看到头顶几十厘米处的钟乳石，还有像蛇一样从地面延伸下来的树根，水中不时游来几只小鱼。第一次在幽闭的洞穴中游泳，充满新鲜感但又有些害怕：钟乳石会不会掉下来拦住我们回到洞口的路？水里会不会有大鱼咬我们？导游的手电筒没电了怎么办？。。。 在洞穴里大约游了半小时，我们活着出来了😬。导游示意我们潜到水下看另外的洞口：淹没在水下的路线需要背着氧气瓶才能进入，探险家们通常会在里面呆一两个小时。看了一眼，我赶紧游上水面并远离洞口，担心会有什么旋涡把我吸进去再也出不来（想象力丰富）。曾经觉得自己很勇敢，现在发现我可能不适合做一个探险家。 新鲜又刺激的洞穴🏊结束，大家都精疲力竭了。根据谷歌地图的评分，我们打算吃一家叫做LOS TARASCOS的taco店。Taco就是墨西哥玉米卷饼，在小小圆圆的玉米饼中放肉、蔬菜和酱料卷着吃。曾经在交大旁边的Lambaba吃过几次，觉得还不如汉堡好吃。而这家正宗的taco店让我打开了新世界的大门。Taco的核心是肉，这家店的肉不知用什么香料腌制过，味道浓郁又保留了肉原有的香味。光是吃肉，就吃的停不下来。给肉锦上添花的是辣酱。吃时香，吃后辣，回味无穷。而蔬菜中和了肉的油腻，给taco增加了一丝爽口的感觉。 很快，一斤肉和一大盘菜被消灭的一干二净。吃过之后，wxy小姐姐表示因为这家taco店，要给我们住的airbnb打五颗星😋！ Day 4: 泡在水里的一天【Xplor水上乐园】在hotel zone闲逛的时候，和路边的旅行社订了Xplor tour。这是坎昆附近三大水上乐园（还有Xcaret, Xel-ha）里最刺激的一个。（因为所有项目都在水上，我们也没有买照相服务，所以此部分无实拍图🤝） 这个乐园主要有四个项目，洞穴漂流、丛林越野（大概属于低配版全地形车）、Zipline和洞穴游泳。 洞穴漂流就是在洞穴里划竹筏，没啥意思。主题乐园的自助餐种类很多，从墨西哥菜到西餐，口味也很棒！ 午饭后，我们来到丛林越野。告示牌上写着：必须满18岁，必须有驾照。一开始我以为这里只是像公园里给小孩开的小汽车，告示不过是吓唬人。直到自己坐在驾驶位上，被几个工作人员三次询问有没有满18岁（甚至不相信我，一定要看我的手牌🙊），我开始觉得这车似乎没那么容易开。 车是全开放的全地形车，见下图（图源Google），只有前进后退两个档位。前段时间在微博上看韩路（某著名汽车自媒体人）在芦芽山泥地开这种车，超级想玩，今天就真的开上了hhh这车的操控和普通汽车相差甚远，不过我还是对自己两年的驾龄（其实没开过几天）很有信心。 五公里的路程几乎全都是坑坑洼洼的土地或泥地，还有无数的U型弯，大约30度上下坡（还没有指示牌）。在经历了几次差点开出车道开进树林的恐慌之后（带给了坐我车的dzy同学不一样的刺激体验🤝），我渐渐稳了起来。 开到大约两公里，工作人员示意我停下来，表示后面的路段比前面难开很多。看到一个女生开车载着一个男生，她再三询问：Who is the better driver? Who is the better driver? 我自信的回答： Me! I have Chinese driver license! 然后我继续掌舵，果然后面的路难度更大，比如下陡坡开到一个窄桥之类的。对于一个刹车都踩不动的新司机来说，确实是不小的挑战……紧接着，尴尬（丢人）的时刻来了。在开下一个陡坡进入全黑的洞穴之后，我刹车没有踩下去并且方向盘没有打够，车撞到了墙，而我的后面紧跟着一辆车。一瞬间，我想起了公园里玩的碰碰车🌚那就倒车呗。果然，一倒车，就撞到了后面的车，而且倒车的方向盘还打反了😢令我没想到的是，我的车嵌入了后面一辆车里，加油只能让轮子原地打滑…… 刚刚再三询问“better driver”的工作人员怒狠狠的来训斥了我，我们乖乖的坐到了别人的车里，完成了剩下的路程。对于被我堵在后面的车，我表示无比抱歉。看来我对自己的车技还是太过自信，只有游戏经验但完全没有实战经验，最后果然翻车了…..以后想玩全地形车，还是要先好好练车😢 接下来，我们来到最火爆的Zipline。Zipline就是坐在绳索顺着绳子滑下去，可以边吹风边看下面的景色，有一些直接滑到水里。在这个乐园，14条Zipline由几个高塔串联起来，从一个滑到另一个再继续滑到其他塔。 最后，是洞穴游泳。和昨天的类似，边游边看洞中的钟乳石之类。我爱🏊‍♀️！ 整体来看，Xplor最好玩的是丛林越野；Zipline玩第一个觉得有些刺激，但熟悉之后就是安心的吹着风欣赏景色了；自助餐很棒。对我来说，140刀的票价+车费不是很值，并没有想象中那么刺激，但开到全地形车还是很开心的！ 晚上回家，我们又去了昨天的taco店，真的好吃到哭泣！ Day 5: 初识古巴【坎昆✈️哈瓦那 + 海边堡垒】一小时的飞机上，根据Lonely Planet（以下简称lp），我们匆匆做了以后一周的攻略🌚 九点半飞机落地，开始了一直期待的没网生活。 机场到处是中国银联的广告，什么“伴你走遍全球”之类。安检的工作人员穿着黑丝超短裙，画着浓妆，一副懒洋洋的样子，我？？？在机场atm取钱，尝试了五个取款机和四张储蓄卡的排列组合，我们终于取到了cuc（好像只要带visa的卡都不能取，还有一些坏的atm）。 坐在出租车上，司机跟着奔放的古巴音乐哼着歌（wxy小姐姐的pixel在没网的情况下很快识别出了歌名，Google是厉害哇！）我们兴奋的看着窗外一切景色：路边吃草的牛羊，老朽但斑斓的小楼，当然，现代车和老爷车交织的马路，无数次出现的卡斯特罗和格瓦拉的头像。 下午，我们来商店买水，见到了古巴的又一个特色：习惯了超市玲琅满目的货架，这样的商店让我感觉回到了小时候“铁娃”家的小商店，东西卖完就没有了，想买要等到下一次进货。还有随意出入的狗子。 睡了午觉，我们决定去海峡对面的两座堡垒（unesco世界文化遗产）。这两座堡垒都是西班牙人为了抵御其他列强的袭击而修建，距今有四百多年了。因为此时接近傍晚，这座叫”Castillo del Morro“的堡垒已经关门。我们便站在堡垒旁的空地上，看着海湾对面的哈瓦那老城。恍惚间，有种站在黄浦江边的感觉。夕阳西下，城市被包裹在落日的余晖里，数百年间，这座堡垒静静与城市对望，守护着哈瓦那的人民。海水拍打着城墙的底部。城堡外可爱的涂鸦。 沿着海湾向里走，我们见到了第二座堡垒：Fortaleza de San Carlos de la Cabana。这座堡垒年龄比上一座小一些，是为了加强上一座的防御能力而修建。他是美洲西班牙殖民地中最长的堡垒，历史上没有人攻破过他。晚上九点，这座堡垒的炮台会举办canonazo仪式：向港口内发射一颗炮弹。表演者们身着十八世纪的军队服装，经过一系列仪式之后，向对面的哈瓦那老城发射一颗熊熊燃烧的炮弹（当然不会射到城内）。炮弹射出的那一刻，我被吓到了🤭在百年之前，这里的炮弹可是接二连三的发射，佩服那时候的士兵。。。 晚上我们坐着老爷车返回Airbnb。这里的老爷车大多是雪弗兰，听说都有五十岁以上，但是司机踩下油门的话，竟还有轻微的推背感，所以发动机应该是近几年新换的。酷炫的内饰。 Day 6: 猫狗的自由之城【哈瓦那老城 + 海滨大道】如果要用一个词语来形容哈瓦那老城，那对我来说一定就是：猫狗的自由之城。 按照lp上哈瓦那老城的游览路线，我们参观了Cathedral de la Habana，海事博物馆，海明威住过的旅馆，老城广场等等。不过我觉得逛哈瓦那老城最重要不是参观景点，而是走在街上欣赏四周的一切建筑、人、猫和狗。 走几步便能看到一个演奏古巴歌曲的乐队。带着红领巾的乐队老爷爷。私毫不受游人干扰，悠闲自在的猫和狗。不知道古巴人是对猫狗有某种崇拜还是什么其他原因，老城的街头巷尾随处可见散步的猫和狗，有的狗甚至横在马路的正中央睡觉。他们体态匀称，对人类完全没有畏惧，幸福的在古巴音乐中生活着😋。数数看这张图里有几只猫咪和狗子~花盆里的猫~妈妈教育我说不要总拍猫猫狗狗，多拍点古巴特色的照片。所以下面是一张街景图。来古巴一定要吃龙虾！15刀吃到饱的龙虾可以说是这里性价比最高的食物了。今天穿着Umich文化衫的wy同学收到了七次Go Blue🙌!密大校友齐聚古巴！ 傍晚，我们来到海滨大道散步。两位古巴少女放着音乐，在海边忘我的扭动着。我们静静的坐在海边，吹着海风，看着城市的灯光亮起。海峡的对面就是昨天刚刚去过的堡垒。这个时候，一辆像泰坦尼克号那么大的邮轮从港口驶出。现代的豪华邮轮与身后的沧桑的堡垒同框，给我一种不真实的感觉。我盯着邮轮出神，上面的人们会不会在和岸边的我们挥手致意？他们在离开古巴的时候在想些什么？他们会不会在想我在想什么？。。。坐在海边听着歌吹着海风的感觉太舒服了，我提议： 我们等到这艘船完全消失在海平面再去吃晚饭吧！ 大家开始打赌几分钟后他会完全消失🌚猜的时间最长的那个人猜了15分钟。于是，我们就坐在海边，看着整个船身变成一半（验证地球是圆的），再变成一个小小的亮点。然而，半小时过去了，还是可以看到变成一个小点的船。下面九图按照时间顺序记录，可以看到船不是垂直海岸开的🌚我就这样在听歌中发呆了半小时，回忆了大学以来的很多事情，意犹未尽，仍然想继续发呆到船消失。其他小伙伴表示该去吃饭了，于是我们来到海岸边的一家苏联式饭店，我可以继续盯着船发呆😋（最后一张照片就是在饭店里），最后他消失了。 后来，回忆这次经历，发现这就是《后会无期》主题曲所唱到的： 当一辆船消失天际 当一个人成了谜你不知道 他们为何离去就像你不知道这竟是结局在每个繁星抛弃银河的夜里我会告别，告别我自己 很喜欢在海边看船消失的这个晚上，回想起来都觉得很浪漫。 Day7: 开始乡村生活【革命博物馆 + 哈瓦那🚖特立尼达 + 特立尼达闲逛】早晨我们来到家门口的古巴革命博物馆（lp上top sights）参观。这里主要讲的是1920年到1959年，古巴人民反对殖民统治，最终取得民族独立的历史故事。作为国家级的博物馆，这里非常简陋：战争中的实物存放在像古巴超市里那样的玻璃柜中，上方是街边打印店的劣质宣传板，还有水磨石的地板（小学楼道的那种）。我走马观花的看了看就溜了。下图是用来传递情报的布娃娃。博物馆后面是卡斯特罗等领导人作战使用的车、坦克等等。站在博物馆的窗边，可以看到古巴特色的街景。走出博物馆，偶遇了lp封面上的同款老爷车！果断合影，lp可以说是我们古巴之行的功臣！没有他，我们大概完全不知道该去哪里玩，该看什么东西，看到的是什么。。。 回到Airbnb，房东问我: Do you want to see LaLa?Of course! Lala是他们家三只吉娃娃之一，一只11岁的大狗狗，和任小美很像。凭着超强的狗缘和专业的按摩手法，很快和三只狗子打成一片🥰然后就愉快的撸狗😬还帮房东超漂亮的女儿拍照，蹭她的上网卡^_^和房东家的狗子们一起玩耍是我在古巴最难忘的回忆之一。我的吸🐶照。还是吸狗，任小美有很多同视角照片！教房东的女儿学习英语的1234，一个超级可爱的小朋友！ 吃过午饭，我们开启了前往特立尼达的五小时车程。前半程是正常的四车道高速公路。司机一个急转弯，我们进入了双向单车道的田间小路。时不时的，我们被优哉游哉的牛车或马车挡在前面；遛羊的人率领他浩浩荡荡的羊群占领整条马路；蓝天白云下，是自由吃草的牛羊马。很久没有见过这样纯粹的乡村景色了。 看着这些自由的牲畜们，我忽然想起了朋友圈看过的一篇文章，讲述的是现代的屠宰场如何虐待动物以高效的获得更高产量的肉制品。当时并没有仔细的一字一字读下去，一是不敢，二是很自私的怕看完之后想吃肉却吃不下去。眼前的画面与那条朋友圈的配图形成了很鲜明的对比，虽然说眼前自由的动物们最终也难逃被吃掉的命运，但至少他们比现代屠宰场里的同类们幸福无数倍。作为一个自私的人类，我无法成为一点肉都不碰的素食主义者，但我希望自己以后可以尽量少吃肉，不要每顿都必须有肉了。 到达特立尼达后，沿着参差不齐的石头铺成的马路，我们打算去村中心广场（Plaza Mayor）觅食。透过敞开的门和窗，可以看到老人和孩子们坐在摇椅上，看着黑白的或者彩色电视；狗子趴在窗户上，打着盹；抬头看天，不出意外的满天繁星。 突然觉得这样的场景似曾相识，想起小时候在奶奶家的四合院里，也是这样的图景：那时候不知道互联网是何物，我的夜生活就是和哥哥在院子里疯玩或者在家里看电视，爷爷奶奶总是坐在院门口和隔壁的几个邻居一起聊天。旅行有的时候也许可以找到曾经的自己。 吃过晚饭，我们来到特立尼达唯二的上网点。见到了广场上“吸网”的人群： 我发现用毒品来比喻网络非常合适：广场上兜售上网卡的当地人像毒贩子，对于最低工资标准十几刀一个月的古巴来说，两刀一个小时的上网卡可以说是奢侈品了；太久没有吸毒的瘾君子们输入卡上的账号密码，兴奋的看着手机上一条条消息通知，忘记自我；一小时上网时间很快过去，离开网络的人们又陷入焦虑与痛苦中。iPhone有了Screen Time功能之后，我习惯每天都去看看，我的最高记录是一天使用11小时。。。平均也有6-8小时。而其中占用时间最多的就是Social Networking类软件。每天超过1/3的时间就这样被手机和网络支配，但原来的我对此浑然不知。在古巴这段没网的日子里，我觉得离开各种社交软件也不过如此，我拥有了更多的时间看风景、看书、和同行的小伙伴们聊天。手机和网络是好东西，但我们却把它变成了毒品一样的存在。古巴七天上网两小时留念。（一张卡可给一个手机上网一小时） Day 8: 刺激与悠闲【Topes de Collantes（山） + Ancon海滩】坐着房东老爷爷帮忙打得老爷爷开的老爷出租车（下图），我们胆战心惊的开过蜿蜒的盘山公路（在途中，老爷爷甚至给车的发动机浇水降温。。。），来到了Topes de Collantes的徒步道入口。老爷爷说这条路线的终点是一个可以游泳的瀑布~往返大概一个多小时。我心里想：一小时哪里叫徒步啊，明明是散步🙄 穿过一段布满🐴💩的石头路之后，我们终于来到了徒步道入口。接下来的景色让我意识到，我们确实不是在徒步，而是在爬山，并且是很野很陡峭的山。所谓的徒步道😅全程中，无论路有多窄，多滑，旁边的山崖有多陡峭，一律没有护栏！虽然这里的景色只是中规中矩的热带丛林，但这充满野趣的道路让我们走起来非常开心、很有挑战！ 到达终点的瀑布时，大家都大汗淋漓。瀑布带来的水气以及下面干净的水潭很快便解除了我们的酷暑。我坐在瀑布前的乱石堆上，饶有兴致的看着在水潭中游泳的人们：爸爸带领着三四岁的儿子一起跳水；白发苍苍的老奶奶慢悠悠的从水中爬上岸。这一老一小刚刚可是像我们一样通过了这野生徒步道的考验啊！心里暗自佩服。虽然见过很多瀑布，但徒步道终点的这座瀑布第一次带给了我无与伦比的清爽和舒畅😎。 下午，老爷爷带着我们去Ancon海滩，lp上说这是古巴南海岸最美的海滩~因为上午的爬山太累了，我躺在沙滩椅上，面朝大海，吹着海风，听着有规律的浪花声和西班牙语的聊天声，沉沉的睡着了。 直到被西斜的太阳照到，才满足的醒过来。这个时候，太阳与海平面只剩几个拳头的距离。 发了一会儿呆，当我再看向海面的时候，太阳竟已经有一小部分沉在了水下！立刻拿出手机录下了2018年的最后一场日落。 我第一次知道，太阳从与海平面相切到完全消失在海面只用三分钟的时间。回程的路上，wy同学兴奋的开始计算日地距离= = Day 9: 无聊的古巴小巴黎【西恩富戈斯】2019年新年第一天，我们来到了沉睡的西恩富戈斯：大多都因为节日景点关门了。 西恩富戈斯最先被法国殖民，所以这里的建筑有法式风情，有“古巴小巴黎“之称。可是这里的路上肮脏不堪（可能是环卫工也在今天放假了），除了市中心的广场之外，并没有体会到法式风情😢下面是聚众吸网的市中心广场。中午，我们坐（站）四十分钟船来到了古巴南海岸唯一的堡垒。从瞭望塔里可以看到加勒比海，我尝试想象着曾经法国士兵站在这里，紧张的等待敌军出现。而此时，恰巧有一匹马在下面悠闲地吃草。在这略显无聊的一天里，有一件很开心的事情：和两个古巴小朋友一起玩耍。进堡垒之前，看到他们在投篮，小小的个子，竟一次次投入。wy同学兴奋的加入了他们，几次没有投中之后，小朋友们在一旁偷偷的笑了🌚大家感慨着体育无国界。出城堡后，发现他们竟然在玩跳房子（暴露年龄）！没想到我小时候玩的游戏竟然万里之外的古巴小朋友也喜欢！又一次感受到了穿越。 Day 10: 使馆区的豪宅【特立尼达🚖哈瓦那 + 哈瓦那使馆区】一大早，我们离开特立尼达。回顾住在特立尼达的这几天，虽然游客的到来让几幢房子改造成了豪华酒店和快餐店，偶尔可以见到载满游客的大巴车，但好在这里的游客还不是太多（不像丽江古城那样成熟的旅游景点）我们依然可以瞥见当地人的生活，还是可以和当地的老奶奶微笑的说着”Hola!”，看着老爷爷笑着说我们是”Chino”（西班牙语的中国人，chi读音与chill的chi类似）。没有旅游业的话，这里不过就是一个偏远的小山村，人们靠着田地和农场过着自给自足的生活。在没有网络的日子里，街头巷尾的古巴音乐以及夜晚的一杯莫吉托酒为村民单调的生活增加色彩，而老人们则坐在摇椅上吹着晚风看着窗外，或者和孙辈们一起津津有味的看着黑白电视。勾起我很多小时候的回忆~ 下午一点左右，我们回到哈瓦那。今天入住的Airbnb是我们行程中最贵的一个，果然很豪华。下面是Airbnb外观是内景~听房东介绍说这里是哈瓦那的使馆区，对门是某国大使的豪宅。并表示这里安全到在大街上睡着也不用担心。出门闲逛，我们果然发现了越南，津巴布韦，尼日利亚等等国家的大使馆。这片街区也和哈瓦那老城风格迥异，马路年久失修，路边栽满了年代感十足的大树。我们还惊喜的发现了中国人的涂鸦。晚饭在一家极有特色的小餐馆解决：院子里养着两只火鸡，两只孔雀，无数只猫咪，还有一个泳池😅在这样的地方吃饭，吃什么、好不好吃已经不再重要！ 没有来得及走到哈瓦那的新城区看看，古巴的行程就这样结束了。 这里有趣吗？我说不清他那里有趣，但是我很想以后再来一次。 Day 11: 感受宗教的力量 【哈瓦那✈️墨西哥城 + 墨西哥市中心】坐上去Airbnb的uber，满街的CDMX (Ciudad de México)标志映入眼帘：宽敞但拥堵的街道，熟知的现代汽车品牌和型号，交错的高架桥，林立的高楼，当然还有墨西哥特有的彩色墙画。有种回到上海的感觉。果然，墨西哥城GDP世界排名第十二(上海第十)。刚从哈瓦那离开的我们感觉瞬间穿越了30年🙈 放下行李后，我们进入一家超市，一个星期没有见过超市的我竟然感动的想哭：这里好多饮料，好多好吃的零食，我都好想吃，超市太伟大了！我猜旅行之前的我，大概会嫌弃这便利店没有Kroger大，种类不够齐全吧🙊 然后我们来房东安利的一家高贵的墨西哥特色饭店吃饭。12:40来吃，服务员表示我们早饭快结束了，叫我们快点儿点单，我们？？？ 店员解释之后才知道墨西哥人十点之后吃早饭 两三点吃午饭……点单之前，店员询问我们想喝热巧克力还是咖啡（后来知道这两种都是墨西哥特色），我们选择了热巧克力。然后店员端来一个陶罐，两手搓动一根木棒，搅动陶罐里的巧克力。下面是学做热巧克力的开心的我~我的天，这也太好喝了吧？？？人生中喝过的最好喝一杯的热巧克力！不像以往喝过的热巧只是甜味和普通巧克力味的叠加，这里的热巧中巧克力的醇香盖过了甜味，还有一点肉桂的香味😋😋太好喝了太好喝了。 走路大概五分钟，我们就来到了市中心的国家艺术宫。艺术宫里是巨幅的壁画，很宏伟，很抽象。能看出有些是讲人民被压迫的故事。因为没有guide也没有英文解释，我是真的看不懂，只知道画的很好，感觉震撼🙊。在二层恰好有Kandinsky的展览。展览介绍他是俄罗斯著名的抽象派画家，所以他画的我还是看不懂，不过很喜欢下面这种类型的画。走过一条像南京路一样热闹的商业街，就是宪法广场：自阿兹特克时代开始，墨西哥人举办各种大型仪式、庆典等的地方。超级大的墨西哥国旗在广场中心飘扬，让人有些敬畏。白色的棚是卖纪念品的摊位。在广场旁边给路人祈福驱邪的土著。位于广场北侧的安静的墨西哥城主教座堂与人声鼎沸的广场形成了鲜明对比。这座教堂是美洲最大最古老的教堂。西班牙哥特式的建筑，沧桑但华丽。教堂外部是精雕细琢的飞拱、神像，恍惚间，有种置身欧洲的错觉。 静谧的教堂内，有十多座礼拜堂。对宗教一窍不通的我呆呆的看着虔诚的信徒们：他们或是低着头跪在神前；或是端坐在椅子上，出神的望着神像，甚至泪流满面；有的人在胸前画着十字。来这里之前，我觉得自己是个坚定的无神论者，认为科学可以解释一切。可看到面前的神像和这些虔诚的人们，我开始有些明白宗教对人的重要性。其实想想自己，在面对无法控制的事情时，比如死亡，也会默默的祷告，希望上帝别把自己爱的人或者狗带走。(因为这座教堂，开学果断选择了一门中世纪建筑课😋) 走出教堂，突然被几个墨西哥人叫住。 Can I take a photo with you? 我们？？？ 然后那一家的三个小孩儿依次站在我们中间和我们合影。。。合完影的他们很开心，我们很受宠若惊🙈 中国城就在离宪法广场步行十分钟的地方。来到这里，终于知道我们为什么会被叫住拍照了：放眼望去，我们是这中国城里唯四的中国人。所以，不出意外的，又被叫住拍合影了。当明星的感觉还不错。（明天在博物馆里，第三次被叫住合影） Day 12: 一堂八小时的墨西哥历史课 【国立人类学博物馆】墨西哥国立人类学博物馆是墨西哥城景点的top1。早晨九点多，博物馆刚刚开门，我们就满心期待的来到了这里。这座“人类学”博物馆其实就是历史博物馆，讲述的是墨西哥各地的早期文明进程（1521年西班牙入侵之前）。第一间展厅介绍的是人类的起源，从匠人(Homo ergaster)到尼安德特人(Homo neanderthalensis)和智人(Homo sapiens arcaico)，再到晚期智人(Homo sapiens sapiens)，文物（的复制品）配合文字，生动形象（比古巴博物馆不知高到哪里去了）。紧接着，第二个展厅开始讲述迁移到美洲大陆，并且到达现在墨西哥地区的人们因地制宜，发展出各具特色的早期文明(Preclassic period)。两个呆萌的陶俑（几乎那时所有的人形文物都傻傻的）~Preclassic之后自然是Classic。博物馆用很大的面积来介绍Teotihuacán文明，因为他们太聪明太伟大了，留下了很多很多文化遗产。比如太阳月亮金字塔（明天去），羽蛇神金字塔等等，还有其他很多的生活、宗教等艺术品。 在讲述了其他很多同时期的文明之后，我看到了这样一句总结: The lesson from the Mesoamerican history of Central Mexico resides in the suppression of cultural traditions that, either for one reason or another collapsed, and the way that part of this ideologies were revisited by emerging groups to give meaning to their existence. 尽管这些曾经辉煌的文明已经消亡，但是他们的思想文化烙印在继承者的血脉中，以此给予这些逝去文明以存在的意义。 紧承这些文明的是在墨西哥城市中心建立伟大文明的阿兹特克(Aztec)人。他们崇尚战争，骁勇善战，征服了很大一片墨西哥地区（类似秦朝大一统？）。他们带给了世界很多重要的粮食，比如🌽，可可，🌶等等。人类学博物馆的镇馆之宝，太阳石，也是阿兹特克人留下的重要文物。忘拍石头，只拍了介绍XD 吃过又贵又难吃的午饭之后，我们来到玛雅文化的展区。玛雅人的智慧让他们拥有了长达四千年的历史，下面是玛雅展馆的介绍~ 各展馆藏品集合。这里的藏品多到有种要“栈”溢出的感觉。。。 在走马观花的逛完二层墨西哥各民族介绍之后，我们已经筋疲力竭。上午九点到下午六点，除了吃饭休息一小时之外，我们竟然站着看了八小时展览。遍布生词（对我来说）的英文介绍配合琳琅满目的文物，墨西哥历史像洪水一样输入进大脑。从早晨的担心展馆里都是西班牙语而没有英文，变成了期待不要有英文，这样我们就不必做出选择要不要看。。。dzy同学表示在古巴的时候嫌弃只有西班牙语没有英文，在墨西哥城嫌弃自己的英文太差。 整个人类学博物馆彻底改变了我对古代美洲人的印象：他们并不是西班牙人口中的野蛮、未开化的民族。这里的印第安人也曾辉煌一时，拥有着令后人赞叹的智慧，推动着世界文明的发展。 吃过晚饭，我提议参观一下墨西哥的商场（想逛街）。两个男生觉得不够exciting，但事实证明他们错了！ 我们在这个叫Sears的商场里，解锁了人生第一次“电梯惊魂”！ 晚上八点到九点，大约一个小时的时间里，我们： 计算了水和手机电量是否够用一天 判断是否会闷死在电梯 讨论电梯坠落的时候该采取什么姿势 分析电梯门为什么打不开 讨论电视台记者来采访该说点什么 wxy和wy同学看了一会儿动漫，dzy同学看了一会儿电子书，我学习了一会儿西班牙语 九点，电梯缓缓的被拉到上面一层，我们终于见到了外面那位说了十次”wait a minute, relax”的工作人员。 工作人员送给我们一瓶矿泉水作为安慰~”死里逃生“、”重见天日“的我们比从游乐场出来还要开心！激动的与这象征重生的矿泉水合影！小伙伴们都对这次exciting的商场之行非常满意😎 Day 13: 像墨西哥人一样生活 【太阳月亮金字塔】上午，我们到北站坐大巴车前往Teotihuacán人留下的杰作：太阳月亮金字塔。 在路上，见到了依山而建的墨西哥小城镇，五彩的房子紧密的排列，像上帝打翻了颜料盘（假装去了瓜纳华托）。 Teotihuacán是一个几乎和玛雅同时代的文明（大约公元一世纪到十世纪）。他们的伟大文明在人类学博物馆中，几乎用了和玛雅文明同样的面积来介绍。 这个文化宝藏在1905年的时候由当时墨西哥总统开始带领发掘（那时候这里只是一片土堆）。为了在五年任期内让Teotihuacán人的文明重见天日，总统对人民征收各种繁杂的税，比如窗户税；并且采用了极其暴力的发掘方式：炸药🧨。结果当然就是金字塔挖出来了，也被毁掉了很大一部分。。。 在修复工作中，总统采用了一种很机智的方式来帮助后人辨别原始和重建的建筑：用小石块点缀在新砌的石头周围。下图中上半部分是原始的，下半部分是重建的。 太阳金字塔和埃及的金字塔几乎一样大，不过前者用来举办各种仪式，后者用作墓地。月亮金字塔虽然较小，但人们认为这座金字塔的意义更大，因为他的内部有四（或者六）层结构（有观点认为当时的人觉得内层的金字塔太小，不够用，为了方便建造，直接在内层金字塔套更大的一个）。坐东朝西的太阳金字塔与坐北朝南的月亮金字塔身后各有一座山，远远看去，塔与身后的山有着相近的轮廓，山仿佛像金字塔的影子。人们猜测Teotihuacán是以山的形状为参考来建造金字塔。嗯，山是真的很像金字塔的影子！下图是月亮金字塔与身后的山，路两旁原本林立的寺庙在发掘过程中被炸毁😢站在月亮金字塔的第一层看太阳金字塔与身后的山。 两座金字塔的名字，其实是来源于Teotihuacán城邦衰落之后意外来到这里的阿兹特克人。🌞神和🌛神是阿兹特克人最重要的两个神。因为太阳每天从更大的金字塔前升起（坐东朝西），那这座塔就代表太阳神了，另一个小的就是月亮神。而Teotihuacán这个名字也是来源于阿兹特克人所用的纳华语，意思是：神的城市。见到如此壮观的金字塔，阿兹特克人觉得：这肯定是神建的，人怎么能建出这么大的金字塔呢？这里的金字塔和玛雅人的奇琴伊察金字塔有着相似的回声效果。奇琴伊察的建造略晚于这里，让人不禁想到玛雅人会不会是受到Teotihuacán人的影响呢？1500年前的人们就知道文化交流了吗？好战的Teotihuacán人为什么没有赶走玛雅人呢？关于两座金字塔以及中央大道两旁的庙宇，有太多的未解之谜。也许这里真的如阿兹特人所说，真的是神建造的呢？ 下午三点，我们按照墨西哥人的作息来吃午饭。果然，餐馆座无虚席….直到四点半离开，这里依然坐满了吃午饭的墨西哥人🙊 回家路上见到了占领全球市场的摩拜🤝 回到Airbnb，睡午觉睡到六点半🙊决定在墨西哥的最后一晚再到街上逛逛。在前几天喝过墨西哥的热巧克力后，对这里的巧克力念念不忘，企图找巧克力店买点回去吃。然后发现“懒惰”的墨西哥人早早的就关门回家了…..不过在找巧克力的途中，意外发现了超级浪漫的饭店~决定在最后一晚上告别吃了三天的taco，吃一家精致酒店的快餐… 回家的路上，见到了很多遛狗的墨西哥人。大概统计了一下，十来只狗子里，一半是吉娃娃（不愧是吉娃娃故乡），还有两三只皱着眉头的八哥🥰 Day 14: 返回寒冷的家 【墨西哥城✈️底特律】回家的日子到了。喝了一杯40度的朗（苹）姆（果）酒（汁），告别这个充满回忆的假期。上午十点，我们飞到了洛杉矶。因为下一班飞机是Spirit，不提供饭，所以打算在机场吃午饭。在一众的sandwich, salad店中，意外发现一家有乌冬面的！同时也被la机场的物价惊吓到。突然想到，我们有半个月没见到面条了：古巴吃黑豆拌的米饭，墨西哥吃taco😢于是四个人很默契的点了面。下面是十分钟之后的照片。晚上八点，回到了寒冷的底特律机场。一个幸福的14天假期结束了，既不舍也开心！ 开支这次旅行秉承着一个宗旨：吃好喝好玩好，以及，能住就行。 所以我们全程住在Airbnb。幸运的是，房间都比较干净，房东都很善良，热心的帮我们推荐景点、订车😋。 机票占了总开支的一多半。尽管我们进行了日期和目的地的各种排列组合，发现按照：底特律-坎昆，坎昆-哈瓦那，哈瓦那-墨西哥城，墨西哥城-洛杉矶，洛杉矶-底特律的飞法是最便宜且中转少的，但遇上了圣诞假期，导致机票贵了许多。 古巴的吃饭和在美帝差不多，普通的餐馆（开给游客的）大约10-20刀/人，；打车也和美帝有一拼，比如半小时的车程要价35刀；景点门票相比吃饭可忽略不计。 墨西哥吃饭和中国类似，街边小店的价格非常亲民（比如坎昆的那家taco店，400比索/4人，还贼好吃）；墨西哥程打车靠uber，价格和中国类似；门票也很亲民，人类学博物馆70比索☺️。（这样看来，墨西哥城的性价比是最高的hhh） 住宿：240刀 = 1632RMB 机票：2171+1498+2412+2579 = 8660RMB 古巴吃饭玩耍：2260RMB 墨西哥吃饭玩耍：379刀 = 2577RMB 共计：15129RMB （感谢爸妈的大力支持❤️） 小建议 去墨西哥前带一定数量的美元，很多情况下都可以用美元支付。但在墨西哥取美元手续费比较高。 去古巴前，做好详细的攻略或者带一本旅行参考书（推荐Lonely Planet🥰）。没有网络的日子，如果没有参考资料的话，很容易在异国不知所措， 学西班牙语！学西班牙语！学西班牙语！这次旅行最大的遗憾就是来之前没好好学西班牙语😢坐出租车没法和司机交流，看博物馆不知所云，去当地饭店只能靠google translate。旅行结束之后，学会了几句西语，其中最常用的是”Donde esta el baño?”（哪里有洗手间）hhh。 未完待续 写在最后返回安娜堡后，稍作休息，新的学期开始了。尽管无数次在赶due赶到崩溃的时候发誓下学期一定不选这么多的课，但还是在选课的时候老实的把下个学期安排的满满当当。记得曾经和朋友抱怨说，我们一直都在追求着“更好”，更好的高中、更好的大学、更好的工作，这样无休止的努力什么时候才是个尽头呢？他说，最好的人生状态其实是“忙中偷闲”。 每天躺在沙滩上晒太阳，总有一天会晒腻；而在忙碌的学期结束之后的日光浴，才让我体会到无与伦比的悠闲与放松。忙中偷闲的生活是很开心啊！ 最后，感谢wxy，wy，dzy同学一路上的陪伴🥳！ 第一次写游记，有任何建议欢迎在留言区指教！]]></content>
      <categories>
        <category>Travel Notes</category>
      </categories>
      <tags>
        <tag>Chinese</tag>
        <tag>Travel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F01%2F13%2Fhello_world%2F</url>
    <content type="text"><![CDATA[Hello! This is Regina8023’s blog! I will post my travel notes, interesting technical artical and my thoughts in this blog!Meow!]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Myself</tag>
        <tag>English</tag>
      </tags>
  </entry>
</search>
